#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BargeData")]
public partial class BargeDataModelDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCompany(Company instance);
  partial void UpdateCompany(Company instance);
  partial void DeleteCompany(Company instance);
  partial void InsertDraftLevel(DraftLevel instance);
  partial void UpdateDraftLevel(DraftLevel instance);
  partial void DeleteDraftLevel(DraftLevel instance);
  partial void InsertEquipment(Equipment instance);
  partial void UpdateEquipment(Equipment instance);
  partial void DeleteEquipment(Equipment instance);
  partial void InsertTestReading(TestReading instance);
  partial void UpdateTestReading(TestReading instance);
  partial void DeleteTestReading(TestReading instance);
  #endregion
	
	public BargeDataModelDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BargeDataConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public BargeDataModelDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public BargeDataModelDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public BargeDataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public BargeDataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Company> Companies
	{
		get
		{
			return this.GetTable<Company>();
		}
	}
	
	public System.Data.Linq.Table<DraftLevel> DraftLevels
	{
		get
		{
			return this.GetTable<DraftLevel>();
		}
	}
	
	public System.Data.Linq.Table<Equipment> Equipments
	{
		get
		{
			return this.GetTable<Equipment>();
		}
	}
	
	public System.Data.Linq.Table<TestReading> TestReadings
	{
		get
		{
			return this.GetTable<TestReading>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CompanyID;
	
	private string _BuilderName;
	
	private EntitySet<Equipment> _Equipments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnBuilderNameChanging(string value);
    partial void OnBuilderNameChanged();
    #endregion
	
	public Company()
	{
		this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuilderName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string BuilderName
	{
		get
		{
			return this._BuilderName;
		}
		set
		{
			if ((this._BuilderName != value))
			{
				this.OnBuilderNameChanging(value);
				this.SendPropertyChanging();
				this._BuilderName = value;
				this.SendPropertyChanged("BuilderName");
				this.OnBuilderNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Equipment", Storage="_Equipments", ThisKey="CompanyID", OtherKey="CompanyID")]
	public EntitySet<Equipment> Equipments
	{
		get
		{
			return this._Equipments;
		}
		set
		{
			this._Equipments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DraftLevel")]
public partial class DraftLevel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private string _DraftLevel1;
	
	private int _Tonnage;
	
	private EntityRef<Equipment> _Equipment;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnDraftLevel1Changing(string value);
    partial void OnDraftLevel1Changed();
    partial void OnTonnageChanging(int value);
    partial void OnTonnageChanged();
    #endregion
	
	public DraftLevel()
	{
		this._Equipment = default(EntityRef<Equipment>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._Equipment.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="DraftLevel", Storage="_DraftLevel1", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string DraftLevel1
	{
		get
		{
			return this._DraftLevel1;
		}
		set
		{
			if ((this._DraftLevel1 != value))
			{
				this.OnDraftLevel1Changing(value);
				this.SendPropertyChanging();
				this._DraftLevel1 = value;
				this.SendPropertyChanged("DraftLevel1");
				this.OnDraftLevel1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tonnage", DbType="Int NOT NULL")]
	public int Tonnage
	{
		get
		{
			return this._Tonnage;
		}
		set
		{
			if ((this._Tonnage != value))
			{
				this.OnTonnageChanging(value);
				this.SendPropertyChanging();
				this._Tonnage = value;
				this.SendPropertyChanged("Tonnage");
				this.OnTonnageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_DraftLevel", Storage="_Equipment", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
	public Equipment Equipment
	{
		get
		{
			return this._Equipment.Entity;
		}
		set
		{
			Equipment previousValue = this._Equipment.Entity;
			if (((previousValue != value) 
						|| (this._Equipment.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Equipment.Entity = null;
					previousValue.DraftLevels.Remove(this);
				}
				this._Equipment.Entity = value;
				if ((value != null))
				{
					value.DraftLevels.Add(this);
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(string);
				}
				this.SendPropertyChanged("Equipment");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipment")]
public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private int _CompanyID;
	
	private int _Length;
	
	private int _Width;
	
	private int _Height;
	
	private string _LightDraft;
	
	private EntitySet<DraftLevel> _DraftLevels;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnLengthChanging(int value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnLightDraftChanging(string value);
    partial void OnLightDraftChanged();
    #endregion
	
	public Equipment()
	{
		this._DraftLevels = new EntitySet<DraftLevel>(new Action<DraftLevel>(this.attach_DraftLevels), new Action<DraftLevel>(this.detach_DraftLevels));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int NOT NULL")]
	public int Length
	{
		get
		{
			return this._Length;
		}
		set
		{
			if ((this._Length != value))
			{
				this.OnLengthChanging(value);
				this.SendPropertyChanging();
				this._Length = value;
				this.SendPropertyChanged("Length");
				this.OnLengthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
	public int Width
	{
		get
		{
			return this._Width;
		}
		set
		{
			if ((this._Width != value))
			{
				this.OnWidthChanging(value);
				this.SendPropertyChanging();
				this._Width = value;
				this.SendPropertyChanged("Width");
				this.OnWidthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int NOT NULL")]
	public int Height
	{
		get
		{
			return this._Height;
		}
		set
		{
			if ((this._Height != value))
			{
				this.OnHeightChanging(value);
				this.SendPropertyChanging();
				this._Height = value;
				this.SendPropertyChanged("Height");
				this.OnHeightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LightDraft", DbType="VarChar(5)")]
	public string LightDraft
	{
		get
		{
			return this._LightDraft;
		}
		set
		{
			if ((this._LightDraft != value))
			{
				this.OnLightDraftChanging(value);
				this.SendPropertyChanging();
				this._LightDraft = value;
				this.SendPropertyChanged("LightDraft");
				this.OnLightDraftChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_DraftLevel", Storage="_DraftLevels", ThisKey="ID", OtherKey="ID")]
	public EntitySet<DraftLevel> DraftLevels
	{
		get
		{
			return this._DraftLevels;
		}
		set
		{
			this._DraftLevels.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Equipment", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Equipments.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Equipments.Add(this);
					this._CompanyID = value.CompanyID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DraftLevels(DraftLevel entity)
	{
		this.SendPropertyChanging();
		entity.Equipment = this;
	}
	
	private void detach_DraftLevels(DraftLevel entity)
	{
		this.SendPropertyChanging();
		entity.Equipment = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestReadings")]
public partial class TestReading : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _BargeID;
	
	private System.DateTime _DateTaken;
	
	private int _ScaleReading;
	
	private int _InstrumentReading;
	
	private string _DraftReading;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBargeIDChanging(string value);
    partial void OnBargeIDChanged();
    partial void OnDateTakenChanging(System.DateTime value);
    partial void OnDateTakenChanged();
    partial void OnScaleReadingChanging(int value);
    partial void OnScaleReadingChanged();
    partial void OnInstrumentReadingChanging(int value);
    partial void OnInstrumentReadingChanged();
    partial void OnDraftReadingChanging(string value);
    partial void OnDraftReadingChanged();
    #endregion
	
	public TestReading()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BargeID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string BargeID
	{
		get
		{
			return this._BargeID;
		}
		set
		{
			if ((this._BargeID != value))
			{
				this.OnBargeIDChanging(value);
				this.SendPropertyChanging();
				this._BargeID = value;
				this.SendPropertyChanged("BargeID");
				this.OnBargeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTaken", DbType="DateTime NOT NULL")]
	public System.DateTime DateTaken
	{
		get
		{
			return this._DateTaken;
		}
		set
		{
			if ((this._DateTaken != value))
			{
				this.OnDateTakenChanging(value);
				this.SendPropertyChanging();
				this._DateTaken = value;
				this.SendPropertyChanged("DateTaken");
				this.OnDateTakenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaleReading", DbType="Int NOT NULL")]
	public int ScaleReading
	{
		get
		{
			return this._ScaleReading;
		}
		set
		{
			if ((this._ScaleReading != value))
			{
				this.OnScaleReadingChanging(value);
				this.SendPropertyChanging();
				this._ScaleReading = value;
				this.SendPropertyChanged("ScaleReading");
				this.OnScaleReadingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrumentReading", DbType="Int NOT NULL")]
	public int InstrumentReading
	{
		get
		{
			return this._InstrumentReading;
		}
		set
		{
			if ((this._InstrumentReading != value))
			{
				this.OnInstrumentReadingChanging(value);
				this.SendPropertyChanging();
				this._InstrumentReading = value;
				this.SendPropertyChanged("InstrumentReading");
				this.OnInstrumentReadingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DraftReading", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string DraftReading
	{
		get
		{
			return this._DraftReading;
		}
		set
		{
			if ((this._DraftReading != value))
			{
				this.OnDraftReadingChanging(value);
				this.SendPropertyChanging();
				this._DraftReading = value;
				this.SendPropertyChanged("DraftReading");
				this.OnDraftReadingChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
